------------------------------------------------------------------
-- util.ast
--
-- this module defines utility functions and structures
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------

------------------------------------------------------------------
-- TYPE CONVERSION FUNCTIONS --
------------------------------------------------------------------

------------------------------------------------------------------
function tointeger
------------------------------------------------------------------
with (item:%string,base:%integer) do return escape
"
global __retval__
item_val = state.symbol_table.lookup_sym('item')
base_val = state.symbol_table.lookup_sym('base')
__retval__ = ('integer', int(item_val[1], base=base_val[1]))
"
orwith item do return escape
"
global __retval__

item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('integer', int(item_val[1]))
"
end

------------------------------------------------------------------
function toreal
------------------------------------------------------------------
with item do return escape
"
global __retval__

item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('real', float(item_val[1]))
"
end

------------------------------------------------------------------
function toboolean
------------------------------------------------------------------
with item do return escape
"
global __retval__

item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('boolean', bool(item_val[1]))
"
end

------------------------------------------------------------------
function tostring
------------------------------------------------------------------
with item do return escape
"
global __retval__
from asteroid_support import term2string

item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('string', term2string(item_val))
"
end

------------------------------------------------------------------
function tobase
------------------------------------------------------------------
-- represent the given integer x as a numeral in different bases
with (x:%integer,base:%integer) do return escape
"
global __retval__

x_val = state.symbol_table.lookup_sym('x')
base_val = state.symbol_table.lookup_sym('base')

if base_val[1] == 2:
  __retval__ = ('string', format(x_val[1],'b'))
elif base_val[1] == 8:
  __retval__ = ('string', format(x_val[1],'o'))
elif base_val[1] == 16:
  __retval__ = ('string', format(x_val[1],'X'))
else:
  raise ValueError('illegal base value {}'
          .format(base_val[1]))
"
end

------------------------------------------------------------------
-- UTILITY FUNCTIONS --
------------------------------------------------------------------

------------------------------------------------------------------
function exit
------------------------------------------------------------------
with none do escape
"
import sys
sys.exit(1)
"
orwith msg:%string do escape
"
import sys
msg_val = state.symbol_table.lookup_sym('msg')
print(msg_val[1])
sys.exit(1)
"
end

------------------------------------------------------------------
function copy
------------------------------------------------------------------
-- make a deep copy of an Asteroid object
with obj do return escape
"
global __retval__
import copy
obj_val = state.symbol_table.lookup_sym('obj')
__retval__ = copy.deepcopy(obj_val)
"
end

------------------------------------------------------------------
function cls
------------------------------------------------------------------
-- clear screen
with none do escape
"
import os
import platform

if platform.win32_ver()[0]:
    os.system('cls')
else:
    os.system('clear')
"
end

------------------------------------------------------------------
function sleep
------------------------------------------------------------------
-- program sleep for secs seconds
with secs %if isscalar(secs) do escape
"
import time
secs_val = state.symbol_table.lookup_sym('secs')
time.sleep(secs_val[1])
"
end

------------------------------------------------------------------
function zip
------------------------------------------------------------------
-- implements Python's zip function
with (list1:%list,list2:%list) do return escape
"
global __retval__

list1_val = state.symbol_table.lookup_sym('list1')
list2_val = state.symbol_table.lookup_sym('list2')

# zip it with Python's zip
l = list(zip(list1_val[1], list2_val[1]))

# turn Python tuples into Asteroid tuples and
# put them onto an output list
out_list = []
for (i,t) in l:
  out_list.append(('tuple',[i,t]))

__retval__ = ('list', out_list)
"
end

------------------------------------------------------------------
function unzip
------------------------------------------------------------------
-- unzip a list of pairs.
with (list:%list) do return escape
"
global __retval__
from asteroid_support import assert_match

list_val = state.symbol_table.lookup_sym('list')

c1list, c2list = ([],[])
for (TUPLE, [c1,c2]) in list_val[1]:
    assert_match(TUPLE, 'tuple')
    c1list.append(c1)
    c2list.append(c2)

__retval__ = ('tuple', [('list', c1list), ('list',c2list)])
"
end

------------------------------------------------------------------
function ascii
------------------------------------------------------------------
-- given a char return the corresponding ASCII code.
with item:%string do return escape
"
global __retval__
item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('integer', ord(item_val[1]))
"
end

------------------------------------------------------------------
function achar
------------------------------------------------------------------
-- given a decimal ASCII code return the corresponding character symbol
with item:%integer do return escape
"
global __retval__
item_val = state.symbol_table.lookup_sym('item')
__retval__ = ('string', str(chr(item_val[1])))
"
end
