-- a small program that demonstrates that patterns can be used both
-- for constructing as well as destructuring of terms.

-- load modules
load "io".
load "util".

-- family term constructors for our pattern
structure Family with
  data parent1.
  data parent2.
  data children.
  end

structure Parent with
  data name.
  end

structure Children with
  data list.
  end

-- first-class family pattern
-- note: the quote operator prevents immediate evaluation
let family_pattern = 'Family(Parent(p1), Parent(p2), Children(c)).
println family_pattern.

-- construct a family using the family pattern as a constructor
function construct_family
  with (pat, p1, p2, c) do
    return eval(pat). -- use first-class pattern as a constructor
  end

-- destructure a family using pattern matching
function destructure_family
  with (pat, term) do
    let *pat = term. -- use first-class pattern as pattern
    return [p1, p2, c].
  end

-- construct a family
let family = construct_family(family_pattern,"Harry","Bridget",["Sue","Peter"]).
println family.

-- destructure a family
let members = destructure_family(family_pattern, family).
println members.
